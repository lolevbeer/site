info:
    version: 1.0.0
    title: 'GitRows API Interface'
    contact:
        name: energee
        url: 'https://github.com/energee'
    x-gitrows-repository: 'https://github.com/energee/lolev/blob/master/_data/people.json'
    x-gitrows-api-path: '@github/energee/lolev/_data/people.json'
    description: "\n\n---\n\nCreated with [GitRows](https://gitrows.com)"
components:
    schemas:
        Error:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                message:
                    type: string
                documentation:
                    type: object
                    properties:
                        description:
                            type: string
                        url:
                            type: string
        Record:
            type: object
            properties:
                first:
                    type: string
                    description: Ted
                last:
                    type: string
                    description: Slesinski
                email:
                    type: string
                    description: ted@lolev.beer
                phone:
                    type: string
                    description: '7245189786'
                job_title:
                    type: string
                    description: Testing
openapi: 3.0.0
servers:
    -
        url: 'https://api.gitrows.com'
paths:
    /@github/energee/lolev/_data/people.json:
        get:
            description: 'Return a list of records'
            operationId: listRecords
            parameters:
                -
                    in: query
                    name: first
                    schema:
                        type: string
                    description: "Select records that match value for `first`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `first=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: last
                    schema:
                        type: string
                    description: "Select records that match value for `last`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `last=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: email
                    schema:
                        type: string
                    description: "Select records that match value for `email`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `email=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: phone
                    schema:
                        type: string
                    description: "Select records that match value for `phone`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `phone=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: job_title
                    schema:
                        type: string
                    description: "Select records that match value for `job_title`.\n\nYou can optionally use the following comparison operators as prefixes to your values, e.g. `job_title=*:foo`:\n\n`starts:` text starts with, alias: `^:`; `contains:` contains text, alias: `*:`; `ends:` text ends with, alias: `$:`"
                    allowReserved: true
                -
                    in: query
                    name: $count
                    schema:
                        type: string
                    description: 'Counts the records in the data set, use `*` or any `columnName` as parameter'
                    allowReserved: true
                -
                    in: query
                    name: $avg
                    schema:
                        type: string
                    description: 'Calculates the average of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $sum
                    schema:
                        type: string
                    description: 'Calculates the sum of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $min
                    schema:
                        type: string
                    description: 'Returns the smallest of all numeric values in `columnName`'
                    allowReserved: true
                -
                    in: query
                    name: $max
                    schema:
                        type: string
                    description: 'Returns the largest of all numeric values in `columnName`'
                    allowReserved: true
            responses:
                '200':
                    description: 'A list of records with any optionally provided filters applied.'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Record'
                default:
                    description: 'Error Payload'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
